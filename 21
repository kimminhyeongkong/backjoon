from collections import deque
n,l,r = map(int,input().split())
li = []
for i in range(n):
  li.append(list(map(int,input().split())))

result = 0
dx = [0,-1,0,1]
dy = [1,0,-1,0]
def dfs(x,y,visited):

  q = deque()
  q.append((x,y))
  count  = 1
  sum = li[x][y]
  tmp = [(x,y)]
  visited[x][y] = 1
  while q:
    x,y=q.popleft()
  
    for i in range(4):
      nx = x+dx[i]
      ny = y + dy[i]
      if nx < n and  nx>= 0 and ny < n and ny >= 0 and visited[nx][ny] == -1:
        if l<=abs(li[nx][ny]- li[x][y])<= r:
          q.append((nx,ny))
          count += 1
          sum+= li[nx][ny]
          tmp.append((nx,ny))
          visited[nx][ny] = 1

  if count >= 2:

    end =sum //count
    for x,y in tmp:
      li[x][y] = end
    return True
  return False
    
while True:
  break_point = False
  visited = [[-1] * n for i in range(n)]
  
  for i in range(n):
    for j in range(n):
      if visited[i][j] == -1:
        if dfs(i,j,visited):
          break_point = True 
  if not break_point:
    break
  result += 1

print(result)
