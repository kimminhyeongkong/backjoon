import heapq
T = int(input())
INF = int(1e9)
dx = [0,-1,0,1]
dy = [1,0,-1,0]
for i in range(T):
  n = int(input())
  graph = []
  distance = [[INF]*n for _ in range(n)]
  
  for i in range(n):
    graph.append(list(map(int,input().split())))

  x,y = 0,0
  distance[x][y] = graph[x][y]
  q = [(graph[x][y],x,y)]

  while q:
    dist,x,y = heapq.heappop(q)
    if dist > distance[x][y]:
      continue
    for i in range(4):
      nx = x+dx[i]
      ny = y + dy [i]
      if nx < n and nx>= 0 and ny <n and ny >= 0:
        if dist + graph[nx][ny] < distance[nx][ny]:
          distance[nx][ny] = dist+graph[nx][ny]
          heapq.heappush(q,(distance[nx][ny],nx,ny))

  print(distance[n-1][n-1])
